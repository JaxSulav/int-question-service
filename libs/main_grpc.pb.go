// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package question

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QuestionServiceClient is the client API for QuestionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuestionServiceClient interface {
	// Type
	CreateType(ctx context.Context, in *CreateTypeRequest, opts ...grpc.CallOption) (*CreateTypeResponse, error)
	UpdateType(ctx context.Context, in *UpdateTypeRequest, opts ...grpc.CallOption) (*UpdateTypeResponse, error)
	ListType(ctx context.Context, in *ListTypeRequest, opts ...grpc.CallOption) (*ListTypeResponse, error)
	RetrieveType(ctx context.Context, in *RetrieveTypeRequest, opts ...grpc.CallOption) (*RetrieveTypeResponse, error)
	DeleteType(ctx context.Context, in *DeleteTypeRequest, opts ...grpc.CallOption) (*DeleteTypeResponse, error)
	// Question
	CreateQuestion(ctx context.Context, in *CreateQuestionRequest, opts ...grpc.CallOption) (*CreateQuestionResponse, error)
	UpdateQuestion(ctx context.Context, in *UpdateQuestionRequest, opts ...grpc.CallOption) (*UpdateQuestionResponse, error)
	ListQuestion(ctx context.Context, in *ListQuestionRequest, opts ...grpc.CallOption) (*ListQuestionResponse, error)
	RetrieveQuestion(ctx context.Context, in *RetrieveQuestionRequest, opts ...grpc.CallOption) (*RetrieveQuestionResponse, error)
	DeleteQuestion(ctx context.Context, in *DeleteQuestionRequest, opts ...grpc.CallOption) (*DeleteQuestionResponse, error)
	// Set
	CreateSet(ctx context.Context, in *CreateSetRequest, opts ...grpc.CallOption) (*CreateSetResponse, error)
	UpdateSet(ctx context.Context, in *UpdateSetRequest, opts ...grpc.CallOption) (*UpdateSetResponse, error)
	ListSet(ctx context.Context, in *ListSetRequest, opts ...grpc.CallOption) (*ListSetResponse, error)
	RetrieveSet(ctx context.Context, in *RetrieveSetRequest, opts ...grpc.CallOption) (*RetrieveSetResponse, error)
	DeleteSet(ctx context.Context, in *DeleteSetRequest, opts ...grpc.CallOption) (*DeleteSetResponse, error)
	// QuestionSet
	CreateQuestionSet(ctx context.Context, in *CreateQuestionSetRequest, opts ...grpc.CallOption) (*CreateQuestionSetResponse, error)
	UpdateQuestionSet(ctx context.Context, in *UpdateQuestionSetRequest, opts ...grpc.CallOption) (*UpdateQuestionSetResponse, error)
	ListQuestionSet(ctx context.Context, in *ListQuestionSetRequest, opts ...grpc.CallOption) (*ListQuestionSetResponse, error)
	RetrieveQuestionSet(ctx context.Context, in *RetrieveQuestionSetRequest, opts ...grpc.CallOption) (*RetrieveQuestionSetResponse, error)
	DeleteQuestionSet(ctx context.Context, in *DeleteQuestionSetRequest, opts ...grpc.CallOption) (*DeleteQuestionSetResponse, error)
}

type questionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuestionServiceClient(cc grpc.ClientConnInterface) QuestionServiceClient {
	return &questionServiceClient{cc}
}

func (c *questionServiceClient) CreateType(ctx context.Context, in *CreateTypeRequest, opts ...grpc.CallOption) (*CreateTypeResponse, error) {
	out := new(CreateTypeResponse)
	err := c.cc.Invoke(ctx, "/questionService.QuestionService/CreateType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) UpdateType(ctx context.Context, in *UpdateTypeRequest, opts ...grpc.CallOption) (*UpdateTypeResponse, error) {
	out := new(UpdateTypeResponse)
	err := c.cc.Invoke(ctx, "/questionService.QuestionService/UpdateType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) ListType(ctx context.Context, in *ListTypeRequest, opts ...grpc.CallOption) (*ListTypeResponse, error) {
	out := new(ListTypeResponse)
	err := c.cc.Invoke(ctx, "/questionService.QuestionService/ListType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) RetrieveType(ctx context.Context, in *RetrieveTypeRequest, opts ...grpc.CallOption) (*RetrieveTypeResponse, error) {
	out := new(RetrieveTypeResponse)
	err := c.cc.Invoke(ctx, "/questionService.QuestionService/RetrieveType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) DeleteType(ctx context.Context, in *DeleteTypeRequest, opts ...grpc.CallOption) (*DeleteTypeResponse, error) {
	out := new(DeleteTypeResponse)
	err := c.cc.Invoke(ctx, "/questionService.QuestionService/DeleteType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) CreateQuestion(ctx context.Context, in *CreateQuestionRequest, opts ...grpc.CallOption) (*CreateQuestionResponse, error) {
	out := new(CreateQuestionResponse)
	err := c.cc.Invoke(ctx, "/questionService.QuestionService/CreateQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) UpdateQuestion(ctx context.Context, in *UpdateQuestionRequest, opts ...grpc.CallOption) (*UpdateQuestionResponse, error) {
	out := new(UpdateQuestionResponse)
	err := c.cc.Invoke(ctx, "/questionService.QuestionService/UpdateQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) ListQuestion(ctx context.Context, in *ListQuestionRequest, opts ...grpc.CallOption) (*ListQuestionResponse, error) {
	out := new(ListQuestionResponse)
	err := c.cc.Invoke(ctx, "/questionService.QuestionService/ListQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) RetrieveQuestion(ctx context.Context, in *RetrieveQuestionRequest, opts ...grpc.CallOption) (*RetrieveQuestionResponse, error) {
	out := new(RetrieveQuestionResponse)
	err := c.cc.Invoke(ctx, "/questionService.QuestionService/RetrieveQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) DeleteQuestion(ctx context.Context, in *DeleteQuestionRequest, opts ...grpc.CallOption) (*DeleteQuestionResponse, error) {
	out := new(DeleteQuestionResponse)
	err := c.cc.Invoke(ctx, "/questionService.QuestionService/DeleteQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) CreateSet(ctx context.Context, in *CreateSetRequest, opts ...grpc.CallOption) (*CreateSetResponse, error) {
	out := new(CreateSetResponse)
	err := c.cc.Invoke(ctx, "/questionService.QuestionService/CreateSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) UpdateSet(ctx context.Context, in *UpdateSetRequest, opts ...grpc.CallOption) (*UpdateSetResponse, error) {
	out := new(UpdateSetResponse)
	err := c.cc.Invoke(ctx, "/questionService.QuestionService/UpdateSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) ListSet(ctx context.Context, in *ListSetRequest, opts ...grpc.CallOption) (*ListSetResponse, error) {
	out := new(ListSetResponse)
	err := c.cc.Invoke(ctx, "/questionService.QuestionService/ListSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) RetrieveSet(ctx context.Context, in *RetrieveSetRequest, opts ...grpc.CallOption) (*RetrieveSetResponse, error) {
	out := new(RetrieveSetResponse)
	err := c.cc.Invoke(ctx, "/questionService.QuestionService/RetrieveSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) DeleteSet(ctx context.Context, in *DeleteSetRequest, opts ...grpc.CallOption) (*DeleteSetResponse, error) {
	out := new(DeleteSetResponse)
	err := c.cc.Invoke(ctx, "/questionService.QuestionService/DeleteSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) CreateQuestionSet(ctx context.Context, in *CreateQuestionSetRequest, opts ...grpc.CallOption) (*CreateQuestionSetResponse, error) {
	out := new(CreateQuestionSetResponse)
	err := c.cc.Invoke(ctx, "/questionService.QuestionService/CreateQuestionSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) UpdateQuestionSet(ctx context.Context, in *UpdateQuestionSetRequest, opts ...grpc.CallOption) (*UpdateQuestionSetResponse, error) {
	out := new(UpdateQuestionSetResponse)
	err := c.cc.Invoke(ctx, "/questionService.QuestionService/UpdateQuestionSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) ListQuestionSet(ctx context.Context, in *ListQuestionSetRequest, opts ...grpc.CallOption) (*ListQuestionSetResponse, error) {
	out := new(ListQuestionSetResponse)
	err := c.cc.Invoke(ctx, "/questionService.QuestionService/ListQuestionSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) RetrieveQuestionSet(ctx context.Context, in *RetrieveQuestionSetRequest, opts ...grpc.CallOption) (*RetrieveQuestionSetResponse, error) {
	out := new(RetrieveQuestionSetResponse)
	err := c.cc.Invoke(ctx, "/questionService.QuestionService/RetrieveQuestionSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) DeleteQuestionSet(ctx context.Context, in *DeleteQuestionSetRequest, opts ...grpc.CallOption) (*DeleteQuestionSetResponse, error) {
	out := new(DeleteQuestionSetResponse)
	err := c.cc.Invoke(ctx, "/questionService.QuestionService/DeleteQuestionSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuestionServiceServer is the server API for QuestionService service.
// All implementations must embed UnimplementedQuestionServiceServer
// for forward compatibility
type QuestionServiceServer interface {
	// Type
	CreateType(context.Context, *CreateTypeRequest) (*CreateTypeResponse, error)
	UpdateType(context.Context, *UpdateTypeRequest) (*UpdateTypeResponse, error)
	ListType(context.Context, *ListTypeRequest) (*ListTypeResponse, error)
	RetrieveType(context.Context, *RetrieveTypeRequest) (*RetrieveTypeResponse, error)
	DeleteType(context.Context, *DeleteTypeRequest) (*DeleteTypeResponse, error)
	// Question
	CreateQuestion(context.Context, *CreateQuestionRequest) (*CreateQuestionResponse, error)
	UpdateQuestion(context.Context, *UpdateQuestionRequest) (*UpdateQuestionResponse, error)
	ListQuestion(context.Context, *ListQuestionRequest) (*ListQuestionResponse, error)
	RetrieveQuestion(context.Context, *RetrieveQuestionRequest) (*RetrieveQuestionResponse, error)
	DeleteQuestion(context.Context, *DeleteQuestionRequest) (*DeleteQuestionResponse, error)
	// Set
	CreateSet(context.Context, *CreateSetRequest) (*CreateSetResponse, error)
	UpdateSet(context.Context, *UpdateSetRequest) (*UpdateSetResponse, error)
	ListSet(context.Context, *ListSetRequest) (*ListSetResponse, error)
	RetrieveSet(context.Context, *RetrieveSetRequest) (*RetrieveSetResponse, error)
	DeleteSet(context.Context, *DeleteSetRequest) (*DeleteSetResponse, error)
	// QuestionSet
	CreateQuestionSet(context.Context, *CreateQuestionSetRequest) (*CreateQuestionSetResponse, error)
	UpdateQuestionSet(context.Context, *UpdateQuestionSetRequest) (*UpdateQuestionSetResponse, error)
	ListQuestionSet(context.Context, *ListQuestionSetRequest) (*ListQuestionSetResponse, error)
	RetrieveQuestionSet(context.Context, *RetrieveQuestionSetRequest) (*RetrieveQuestionSetResponse, error)
	DeleteQuestionSet(context.Context, *DeleteQuestionSetRequest) (*DeleteQuestionSetResponse, error)
	mustEmbedUnimplementedQuestionServiceServer()
}

// UnimplementedQuestionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQuestionServiceServer struct {
}

func (UnimplementedQuestionServiceServer) CreateType(context.Context, *CreateTypeRequest) (*CreateTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateType not implemented")
}
func (UnimplementedQuestionServiceServer) UpdateType(context.Context, *UpdateTypeRequest) (*UpdateTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateType not implemented")
}
func (UnimplementedQuestionServiceServer) ListType(context.Context, *ListTypeRequest) (*ListTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListType not implemented")
}
func (UnimplementedQuestionServiceServer) RetrieveType(context.Context, *RetrieveTypeRequest) (*RetrieveTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveType not implemented")
}
func (UnimplementedQuestionServiceServer) DeleteType(context.Context, *DeleteTypeRequest) (*DeleteTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteType not implemented")
}
func (UnimplementedQuestionServiceServer) CreateQuestion(context.Context, *CreateQuestionRequest) (*CreateQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuestion not implemented")
}
func (UnimplementedQuestionServiceServer) UpdateQuestion(context.Context, *UpdateQuestionRequest) (*UpdateQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuestion not implemented")
}
func (UnimplementedQuestionServiceServer) ListQuestion(context.Context, *ListQuestionRequest) (*ListQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQuestion not implemented")
}
func (UnimplementedQuestionServiceServer) RetrieveQuestion(context.Context, *RetrieveQuestionRequest) (*RetrieveQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveQuestion not implemented")
}
func (UnimplementedQuestionServiceServer) DeleteQuestion(context.Context, *DeleteQuestionRequest) (*DeleteQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQuestion not implemented")
}
func (UnimplementedQuestionServiceServer) CreateSet(context.Context, *CreateSetRequest) (*CreateSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSet not implemented")
}
func (UnimplementedQuestionServiceServer) UpdateSet(context.Context, *UpdateSetRequest) (*UpdateSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSet not implemented")
}
func (UnimplementedQuestionServiceServer) ListSet(context.Context, *ListSetRequest) (*ListSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSet not implemented")
}
func (UnimplementedQuestionServiceServer) RetrieveSet(context.Context, *RetrieveSetRequest) (*RetrieveSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveSet not implemented")
}
func (UnimplementedQuestionServiceServer) DeleteSet(context.Context, *DeleteSetRequest) (*DeleteSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSet not implemented")
}
func (UnimplementedQuestionServiceServer) CreateQuestionSet(context.Context, *CreateQuestionSetRequest) (*CreateQuestionSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuestionSet not implemented")
}
func (UnimplementedQuestionServiceServer) UpdateQuestionSet(context.Context, *UpdateQuestionSetRequest) (*UpdateQuestionSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuestionSet not implemented")
}
func (UnimplementedQuestionServiceServer) ListQuestionSet(context.Context, *ListQuestionSetRequest) (*ListQuestionSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQuestionSet not implemented")
}
func (UnimplementedQuestionServiceServer) RetrieveQuestionSet(context.Context, *RetrieveQuestionSetRequest) (*RetrieveQuestionSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveQuestionSet not implemented")
}
func (UnimplementedQuestionServiceServer) DeleteQuestionSet(context.Context, *DeleteQuestionSetRequest) (*DeleteQuestionSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQuestionSet not implemented")
}
func (UnimplementedQuestionServiceServer) mustEmbedUnimplementedQuestionServiceServer() {}

// UnsafeQuestionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuestionServiceServer will
// result in compilation errors.
type UnsafeQuestionServiceServer interface {
	mustEmbedUnimplementedQuestionServiceServer()
}

func RegisterQuestionServiceServer(s grpc.ServiceRegistrar, srv QuestionServiceServer) {
	s.RegisterService(&QuestionService_ServiceDesc, srv)
}

func _QuestionService_CreateType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).CreateType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/questionService.QuestionService/CreateType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).CreateType(ctx, req.(*CreateTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_UpdateType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).UpdateType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/questionService.QuestionService/UpdateType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).UpdateType(ctx, req.(*UpdateTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_ListType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).ListType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/questionService.QuestionService/ListType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).ListType(ctx, req.(*ListTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_RetrieveType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).RetrieveType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/questionService.QuestionService/RetrieveType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).RetrieveType(ctx, req.(*RetrieveTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_DeleteType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).DeleteType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/questionService.QuestionService/DeleteType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).DeleteType(ctx, req.(*DeleteTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_CreateQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).CreateQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/questionService.QuestionService/CreateQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).CreateQuestion(ctx, req.(*CreateQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_UpdateQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).UpdateQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/questionService.QuestionService/UpdateQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).UpdateQuestion(ctx, req.(*UpdateQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_ListQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).ListQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/questionService.QuestionService/ListQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).ListQuestion(ctx, req.(*ListQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_RetrieveQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).RetrieveQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/questionService.QuestionService/RetrieveQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).RetrieveQuestion(ctx, req.(*RetrieveQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_DeleteQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).DeleteQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/questionService.QuestionService/DeleteQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).DeleteQuestion(ctx, req.(*DeleteQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_CreateSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).CreateSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/questionService.QuestionService/CreateSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).CreateSet(ctx, req.(*CreateSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_UpdateSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).UpdateSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/questionService.QuestionService/UpdateSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).UpdateSet(ctx, req.(*UpdateSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_ListSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).ListSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/questionService.QuestionService/ListSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).ListSet(ctx, req.(*ListSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_RetrieveSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).RetrieveSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/questionService.QuestionService/RetrieveSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).RetrieveSet(ctx, req.(*RetrieveSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_DeleteSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).DeleteSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/questionService.QuestionService/DeleteSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).DeleteSet(ctx, req.(*DeleteSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_CreateQuestionSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuestionSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).CreateQuestionSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/questionService.QuestionService/CreateQuestionSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).CreateQuestionSet(ctx, req.(*CreateQuestionSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_UpdateQuestionSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuestionSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).UpdateQuestionSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/questionService.QuestionService/UpdateQuestionSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).UpdateQuestionSet(ctx, req.(*UpdateQuestionSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_ListQuestionSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQuestionSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).ListQuestionSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/questionService.QuestionService/ListQuestionSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).ListQuestionSet(ctx, req.(*ListQuestionSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_RetrieveQuestionSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveQuestionSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).RetrieveQuestionSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/questionService.QuestionService/RetrieveQuestionSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).RetrieveQuestionSet(ctx, req.(*RetrieveQuestionSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_DeleteQuestionSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQuestionSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).DeleteQuestionSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/questionService.QuestionService/DeleteQuestionSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).DeleteQuestionSet(ctx, req.(*DeleteQuestionSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuestionService_ServiceDesc is the grpc.ServiceDesc for QuestionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuestionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "questionService.QuestionService",
	HandlerType: (*QuestionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateType",
			Handler:    _QuestionService_CreateType_Handler,
		},
		{
			MethodName: "UpdateType",
			Handler:    _QuestionService_UpdateType_Handler,
		},
		{
			MethodName: "ListType",
			Handler:    _QuestionService_ListType_Handler,
		},
		{
			MethodName: "RetrieveType",
			Handler:    _QuestionService_RetrieveType_Handler,
		},
		{
			MethodName: "DeleteType",
			Handler:    _QuestionService_DeleteType_Handler,
		},
		{
			MethodName: "CreateQuestion",
			Handler:    _QuestionService_CreateQuestion_Handler,
		},
		{
			MethodName: "UpdateQuestion",
			Handler:    _QuestionService_UpdateQuestion_Handler,
		},
		{
			MethodName: "ListQuestion",
			Handler:    _QuestionService_ListQuestion_Handler,
		},
		{
			MethodName: "RetrieveQuestion",
			Handler:    _QuestionService_RetrieveQuestion_Handler,
		},
		{
			MethodName: "DeleteQuestion",
			Handler:    _QuestionService_DeleteQuestion_Handler,
		},
		{
			MethodName: "CreateSet",
			Handler:    _QuestionService_CreateSet_Handler,
		},
		{
			MethodName: "UpdateSet",
			Handler:    _QuestionService_UpdateSet_Handler,
		},
		{
			MethodName: "ListSet",
			Handler:    _QuestionService_ListSet_Handler,
		},
		{
			MethodName: "RetrieveSet",
			Handler:    _QuestionService_RetrieveSet_Handler,
		},
		{
			MethodName: "DeleteSet",
			Handler:    _QuestionService_DeleteSet_Handler,
		},
		{
			MethodName: "CreateQuestionSet",
			Handler:    _QuestionService_CreateQuestionSet_Handler,
		},
		{
			MethodName: "UpdateQuestionSet",
			Handler:    _QuestionService_UpdateQuestionSet_Handler,
		},
		{
			MethodName: "ListQuestionSet",
			Handler:    _QuestionService_ListQuestionSet_Handler,
		},
		{
			MethodName: "RetrieveQuestionSet",
			Handler:    _QuestionService_RetrieveQuestionSet_Handler,
		},
		{
			MethodName: "DeleteQuestionSet",
			Handler:    _QuestionService_DeleteQuestionSet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "main.proto",
}
